services:
<<<<<<< HEAD
  celery:
    build:
      context: ./src
    command: celery -A config worker -l INFO
    env_file:
      - ./.env.docker
    depends_on:
      - rabbitmq
    networks:
      - web

  wsgi:
=======
  asgi:
>>>>>>> main
    build:
      context: .
      dockerfile: buildfiles/api.Dockerfile
    container_name: asgi
    restart: always
    env_file:
      - .env.docker
    networks:
      - web
    depends_on:
      - redis
    ports:
      - "8000:8000"

  db:
    image: postgres:alpine
    container_name: db
    env_file:
      - .env.docker
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - web
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    container_name: redis
    env_file: .env.docker
    restart: always
    networks:
      - web
    expose:
      - 6379

<<<<<<< HEAD
  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - 80:80
    depends_on:
      - wsgi
    restart: always
    volumes:
      - static_volume:/usr/src/app/staticfiles
      - media_volume:/usr/src/app/media
    networks:
      - web

=======
>>>>>>> main
  rabbitmq:
    image: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    restart: always
    networks:
      - web

  nginx:
    build:
      context: .
      dockerfile: buildfiles/frontend.Dockerfile
    container_name: nginx
    ports:
      - 80:80
    networks:
      - web
    depends_on:
      - asgi

#  frontend:
#    build:
#      context: .
#      dockerfile: buildfiles/frontend.Dockerfile
#    container_name: frontend
#    env_file:
#      .env.docker
#    networks:
#      - web

volumes:
  postgres_data:

networks:
  web:
    driver: bridge
